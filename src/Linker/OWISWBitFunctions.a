;// This file has been prepared for Doxygen automatic documentation generation.
;/*! \file ********************************************************************
;*
;* Atmel Corporation
;*
;* \li File:               OWISWBitFunctions.c
;* \li Compiler:           IAR EWAAVR 3.20a
;* \li Support mail:       avr@atmel.com
;*
;* \li Supported devices:  All AVRs.
;*
;* \li Application Note:   AVR318 - Dallas 1-Wire(R) master.
;*
;*
;* \li Description:        Polled software only implementation of the basic
;*                         bit-level signalling in the 1-Wire(R) protocol.
;*
;*                         $Revision: 1.7 $
;*                         $Date: Thursday, August 19, 2004 14:27:18 UTC $
;****************************************************************************/
;
;#include "OWIPolled.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#ifdef OWI_SOFTWARE_DRIVER
;
;#include "compilers.h"
;
;#include "OWIBitFunctions.h"
;
;
;/*! \brief Initialization of the one wire bus(es). (Software only driver)
; *
; *  This function initializes the 1-Wire bus(es) by releasing it and
; *  waiting until any presence sinals are finished.
; *
; *  \param  pins    A bitmask of the buses to initialize.
; */
;void OWI_Init(unsigned char pins)
; 000A 0027 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 000A 0028     OWI_RELEASE_BUS(pins);
;PCODE: $0000000F VOL: 0
;	pins -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 000A 0029     // The first rising edge can be interpreted by a slave as the end of a
; 000A 002A     // Reset pulse. Delay for the required reset recovery time (H) to be
; 000A 002B     // sure that the real reset is interpreted correctly.
; 000A 002C     __delay_cycles(OWI_DELAY_H_STD_MODE);
;PCODE: $0000001C VOL: 0
; 000A 002D }
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;
;
;/*! \brief  Write a '1' bit to the bus(es). (Software only driver)
; *
; *  Generates the waveform for transmission of a '1' bit on the 1-Wire
; *  bus.
; *
; *  \param  pins    A bitmask of the buses to write to.
; */
;void OWI_WriteBit1(unsigned char pins)
; 000A 0038 {
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 000A 0039     unsigned char intState;
; 000A 003A 
; 000A 003B     // Disable interrupts.
; 000A 003C     intState = __save_interrupt();
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;	pins -> Y+1
;	intState -> R17
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 000A 003D     __disable_interrupt();
;PCODE: $00000026 VOL: 0
	cli
;PCODE: $00000027 VOL: 0
; 000A 003E 
; 000A 003F     // Drive bus low and delay.
; 000A 0040     OWI_PULL_BUS_LOW(pins);
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 000A 0041     __delay_cycles(OWI_DELAY_A_STD_MODE);
;PCODE: $00000032 VOL: 0
; 000A 0042 
; 000A 0043     // Release bus and delay.
; 000A 0044     OWI_RELEASE_BUS(pins);
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 000A 0045     __delay_cycles(OWI_DELAY_B_STD_MODE);
;PCODE: $0000003F VOL: 0
; 000A 0046 
; 000A 0047     // Restore interrupts.
; 000A 0048     __restore_interrupt(intState);
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 000A 0049 }
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;
;
;/*! \brief  Write a '0' to the bus(es). (Software only driver)
; *
; *  Generates the waveform for transmission of a '0' bit on the 1-Wire(R)
; *  bus.
; *
; *  \param  pins    A bitmask of the buses to write to.
; */
;void OWI_WriteBit0(unsigned char pins)
; 000A 0054 {
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 000A 0055     unsigned char intState;
; 000A 0056 
; 000A 0057     // Disable interrupts.
; 000A 0058     intState = __save_interrupt();
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;	pins -> Y+1
;	intState -> R17
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 000A 0059     __disable_interrupt();
;PCODE: $0000004D VOL: 0
	cli
;PCODE: $0000004E VOL: 0
; 000A 005A 
; 000A 005B     // Drive bus low and delay.
; 000A 005C     OWI_PULL_BUS_LOW(pins);
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 000A 005D     __delay_cycles(OWI_DELAY_C_STD_MODE);
;PCODE: $00000059 VOL: 0
; 000A 005E 
; 000A 005F     // Release bus and delay.
; 000A 0060     OWI_RELEASE_BUS(pins);
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 000A 0061     __delay_cycles(OWI_DELAY_D_STD_MODE);
;PCODE: $00000066 VOL: 0
; 000A 0062 
; 000A 0063     // Restore interrupts.
; 000A 0064     __restore_interrupt(intState);
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 000A 0065 }
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;
;
;/*! \brief  Read a bit from the bus(es). (Software only driver)
; *
; *  Generates the waveform for reception of a bit on the 1-Wire(R) bus(es).
; *
; *  \param  pins    A bitmask of the bus(es) to read from.
; *
; *  \return A bitmask of the buses where a '1' was read.
; */
;unsigned char OWI_ReadBit(unsigned char pins)
; 000A 0071 {
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 000A 0072     unsigned char intState;
; 000A 0073     unsigned char bitsRead;
; 000A 0074 
; 000A 0075     // Disable interrupts.
; 000A 0076     intState = __save_interrupt();
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;	pins -> Y+2
;	intState -> R17
;	bitsRead -> R16
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 000A 0077     __disable_interrupt();
;PCODE: $00000075 VOL: 0
	cli
;PCODE: $00000076 VOL: 0
; 000A 0078 
; 000A 0079     // Drive bus low and delay.
; 000A 007A     OWI_PULL_BUS_LOW(pins);
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 000A 007B     __delay_cycles(OWI_DELAY_A_STD_MODE);
;PCODE: $00000081 VOL: 0
; 000A 007C 
; 000A 007D     // Release bus and delay.
; 000A 007E     OWI_RELEASE_BUS(pins);
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 000A 007F     __delay_cycles(OWI_DELAY_E_STD_MODE);
;PCODE: $0000008E VOL: 0
; 000A 0080 
; 000A 0081     // Sample bus and delay.
; 000A 0082     bitsRead = OWI_PIN & pins;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 000A 0083     __delay_cycles(OWI_DELAY_F_STD_MODE);
;PCODE: $00000093 VOL: 0
; 000A 0084 
; 000A 0085     // Restore interrupts.
; 000A 0086     __restore_interrupt(intState);
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 000A 0087 
; 000A 0088     return bitsRead;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 000A 0089 }
;PCODE: $0000009D VOL: 0
;
;
;/*! \brief  Send a Reset signal and listen for Presence signal. (software
; *  only driver)
; *
; *  Generates the waveform for transmission of a Reset pulse on the
; *  1-Wire(R) bus and listens for presence signals.
; *
; *  \param  pins    A bitmask of the buses to send the Reset signal on.
; *
; *  \return A bitmask of the buses where a presence signal was detected.
; */
;unsigned char OWI_DetectPresence(unsigned char pins)
; 000A 0097 {
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 000A 0098     unsigned char intState;
; 000A 0099     unsigned char presenceDetected;
; 000A 009A 
; 000A 009B     // Disable interrupts.
; 000A 009C     intState = __save_interrupt();
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;	pins -> Y+2
;	intState -> R17
;	presenceDetected -> R16
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 000A 009D     __disable_interrupt();
;PCODE: $000000A5 VOL: 0
	cli
;PCODE: $000000A6 VOL: 0
; 000A 009E 
; 000A 009F     // Drive bus low and delay.
; 000A 00A0     OWI_PULL_BUS_LOW(pins);
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 000A 00A1     __delay_cycles(OWI_DELAY_H_STD_MODE);
;PCODE: $000000B1 VOL: 0
; 000A 00A2 
; 000A 00A3     // Release bus and delay.
; 000A 00A4     OWI_RELEASE_BUS(pins);
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 000A 00A5     __delay_cycles(OWI_DELAY_I_STD_MODE);
;PCODE: $000000BE VOL: 0
; 000A 00A6 
; 000A 00A7     // Sample bus to detect presence signal and delay.
; 000A 00A8     presenceDetected = ((~OWI_PIN) & pins);
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 000A 00A9     __delay_cycles(OWI_DELAY_J_STD_MODE);
;PCODE: $000000C4 VOL: 0
; 000A 00AA 
; 000A 00AB     // Restore interrupts.
; 000A 00AC     __restore_interrupt(intState);
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 000A 00AD 
; 000A 00AE     return presenceDetected;
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 000A 00AF }
;PCODE: $000000CE VOL: 0
;
;
;#endif
