;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.3 Standard
;Automatic Program Generator
;© Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 06.03.2015
;Author  : PerTic@n
;Company : If You Like This Software,Buy It
;Comments:
;
;
;Chip type               : ATmega128
;Program type            : Application
;AVR Core Clock frequency: 14,745600 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 1024
;*****************************************************/
;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <nokia1100_lcd_lib.h>
;#include <circlebuffer.h>
;#include <handlers.h>
;#include <buttons.h>
;#include <general.h>
;#include <hwinit.h>
;#include <settings.h>
;#include <menu.h>
;
;#include <OWIPolled.h>
;#include <OWIHighLevelFunctions.h>
;#include <OWIBitFunctions.h>
;#include <OWIcrc.h>
;
;unsigned char ds1820_devices;
;OWI_device ds1820_rom_codes[MAX_DS1820];
;OWI_device t_rom_codes[MAX_DS1820];
;
;// External Interrupt 2 service routine
;interrupt [EXT_INT2] void ext_int2_isr(void)
; 0000 002D {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 002E // Place your code here
; 0000 002F static  char halph_wave_counter = 0, halph_wave_counter3 = 0;
; 0000 0030 static  unsigned int halph_wave_counter2 = 0;
; 0000 0031 
; 0000 0032 if (++halph_wave_counter3 >= 99) { //100
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0033     ES_PlaceHeadEvent(EVENT_TIMER_1Hz);
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0034     halph_wave_counter3 = 0;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0035 }
; 0000 0036 
; 0000 0037  if (heater_power == 100) {
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0038     HEATER_ON;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0039     halph_wave_counter = 0;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 003A  } else if (heater_power > 0) {
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 003B 
; 0000 003C     if (++halph_wave_counter >= heater_power) {
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 003D         HEATER_OFF;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 003E     } else {
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 003F         HEATER_ON;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0040     }
;PCODE: $00000031 VOL: 0
; 0000 0041 
; 0000 0042     if (halph_wave_counter >= 99) { //100
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0043         halph_wave_counter = 0;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0044     }
; 0000 0045  } else {
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0046     HEATER_OFF;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0047     halph_wave_counter = 0;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0048  }
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0049 
; 0000 004A  //////////   valve pwm control ////
; 0000 004B  halph_wave_counter2 ++;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 004C  if (halph_wave_counter2 >= pwmPeriod - 1) {
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 004D      halph_wave_counter2 = 0;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 004E      if (pwmOn) {
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 004F          impulseCounter++;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0050      }
; 0000 0051  }
;PCODE: $00000052 VOL: 0
; 0000 0052  if (pwmOn) {
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0053     if (halph_wave_counter2 < valvePulse) {
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0054         VALVE_OPN;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0055     } else {
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0056         VALVE_CLS;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0057     }
;PCODE: $00000062 VOL: 0
; 0000 0058  }
; 0000 0059 
; 0000 005A // heater_watchdog++;
; 0000 005B }
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;
;#ifndef RXB8
;#define RXB8 1
;#endif
;
;#ifndef TXB8
;#define TXB8 0
;#endif
;
;#ifndef UPE
;#define UPE 2
;#endif
;
;#ifndef DOR
;#define DOR 3
;#endif
;
;#ifndef FE
;#define FE 4
;#endif
;
;#ifndef UDRE
;#define UDRE 5
;#endif
;
;#ifndef RXC
;#define RXC 7
;#endif
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;// USART0 Receiver buffer
;#define RX_BUFFER_SIZE0 8
;char rx_buffer0[RX_BUFFER_SIZE0];
;
;#if RX_BUFFER_SIZE0 <= 256
;unsigned char rx_wr_index0,rx_rd_index0,rx_counter0;
;#else
;unsigned int rx_wr_index0,rx_rd_index0,rx_counter0;
;#endif
;
;unsigned char counter_ms = 0;
;
;// This flag is set on USART0 Receiver buffer overflow
;bit rx_buffer_overflow0;
;
;// USART0 Receiver interrupt service routine
;interrupt [USART0_RXC] void usart0_rx_isr(void)
; 0000 0090 {
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0091 char status,data;
; 0000 0092 status=UCSR0A;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0093 data=UDR0;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0094 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0095    {
; 0000 0096    rx_buffer0[rx_wr_index0++]=data;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0097 #if RX_BUFFER_SIZE0 == 256
; 0000 0098    // special case for receiver buffer size=256
; 0000 0099    if (++rx_counter0 == 0) rx_buffer_overflow0=1;
; 0000 009A #else
; 0000 009B    if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 009C    if (++rx_counter0 == RX_BUFFER_SIZE0)
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 009D       {
; 0000 009E       rx_counter0=0;
;PCODE: $00000080 VOL: 0
; 0000 009F       rx_buffer_overflow0=1;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 00A0       }
; 0000 00A1 #endif
; 0000 00A2    }
;PCODE: $00000084 VOL: 0
; 0000 00A3 }
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART0 Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 00AA {
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 00AB char data;
; 0000 00AC while (rx_counter0==0);
;PCODE: $0000008C VOL: 0
;	data -> R17
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 00AD data=rx_buffer0[rx_rd_index0++];
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 00AE #if RX_BUFFER_SIZE0 != 256
; 0000 00AF if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 00B0 #endif
; 0000 00B1 #asm("cli")
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
	cli
;PCODE: $0000009D VOL: 0
; 0000 00B2 --rx_counter0;
;PCODE: $0000009E VOL: 0
; 0000 00B3 #asm("sei")
;PCODE: $0000009F VOL: 0
	sei
;PCODE: $000000A0 VOL: 0
; 0000 00B4 return data;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 00B5 }
;PCODE: $000000A4 VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 00BE {
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00BF // Place your code here
; 0000 00C0 
; 0000 00C1 }
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;
;// Timer1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 00C5 {
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 00C6 
; 0000 00C7 static unsigned char counter = 0;
; 0000 00C8 // Reinitialize Timer1 value
; 0000 00C9 TCNT1H=0xC7B1 >> 8;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 00CA TCNT1L=0xC7B1 & 0xff;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 00CB // Place your code here
; 0000 00CC 
; 0000 00CD ES_PlaceEvent(EVENT_TIMER_1S);
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 00CE counter ++;
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 00CF if (counter >= 10) {
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 00D0     ES_PlaceEvent(EVENT_TIMER_10S);
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 00D1     counter = 0;
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 00D2 }
; 0000 00D3 
; 0000 00D4 if (mode == RUN_DIST || mode == RUN_RECT || mode == RUN_RECT_SET || mode == CALIBRATE_RUN) {
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 00D5     sec ++;
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 00D6     if (sec >= 60) {
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 00D7         minutes ++;
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 00D8         sec = 0;
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 00D9         if (minutes >= 60) {
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 00DA             minutes = 0;
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 00DB             hours ++;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 00DC         }
; 0000 00DD     }
;PCODE: $000000DE VOL: 0
; 0000 00DE }
;PCODE: $000000DF VOL: 0
; 0000 00DF 
; 0000 00E0 if (mode == RUN_RECT || mode == RUN_RECT_SET) {
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 00E1         if (!timerOn){
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 00E2             timer ++;
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 00E3         }
; 0000 00E4         if (!timerOn && startStop){
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 00E5             timer_off ++;
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 00E6         }
; 0000 00E7 }
;PCODE: $000000FF VOL: 0
; 0000 00E8 }
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;
;// Timer2 overflow interrupt service routine
;interrupt [TIM2_OVF] void timer2_ovf_isr(void)
; 0000 00EC {
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 00ED // Place your code here
; 0000 00EE 
; 0000 00EF if (++counter_ms >= 15) {
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 00F0     ES_PlaceEvent(EVENT_TIMER_250MS);
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 00F1     counter_ms = 0;
;PCODE: $0000010C VOL: 0
; 0000 00F2 }
; 0000 00F3 
; 0000 00F4 ES_PlaceEvent(EVENT_TIMER_10MS);
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 00F5 
; 0000 00F6 }
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;
;unsigned int adc_data;
;
;
;// ADC interrupt service routine
;interrupt [ADC_INT] void adc_isr(void)
; 0000 00FD {
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 00FE // Read the AD conversion result
; 0000 00FF adc_data=ADCW;
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 0100 
; 0000 0101 }
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;
;// Read the AD conversion result
;// with noise canceling
;unsigned int read_adc(unsigned char adc_input)
; 0000 0106 {
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 0107 ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;PCODE: $0000011C VOL: 0
;	adc_input -> Y+0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 0108 // Delay needed for the stabilization of the ADC input voltage
; 0000 0109 delay_us(10);
;PCODE: $00000120 VOL: 0
; 0000 010A #asm
;PCODE: $00000121 VOL: 0
; 0000 010B     in   r30,mcucr
    in   r30,mcucr
;PCODE: $00000122 VOL: 0
; 0000 010C     cbr  r30,__sm_mask
    cbr  r30,__sm_mask
;PCODE: $00000123 VOL: 0
; 0000 010D     sbr  r30,__se_bit | __sm_adc_noise_red
    sbr  r30,__se_bit | __sm_adc_noise_red
;PCODE: $00000124 VOL: 0
; 0000 010E     out  mcucr,r30
    out  mcucr,r30
;PCODE: $00000125 VOL: 0
; 0000 010F     sleep
    sleep
;PCODE: $00000126 VOL: 0
; 0000 0110     cbr  r30,__se_bit
    cbr  r30,__se_bit
;PCODE: $00000127 VOL: 0
; 0000 0111     out  mcucr,r30
    out  mcucr,r30
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 0112 #endasm
; 0000 0113 return adc_data;
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 0114 }
;PCODE: $0000012D VOL: 0
;
;// Declare your global variables here
;#ifdef HW1_P
;signed int p_offset;
;#endif
;unsigned char sec = 0;
;unsigned char minutes = 0;
;unsigned char hours = 0;
;char heater_power = 0;
;char pwmOn = 0;
;char valvePulse = DEFAUL_VALVE_PULSE; // // ñìîòðè ïàðàìåòð â general.h

	.DSEG
;unsigned int impulseCounter = 0;
;unsigned int pwmPeriod = 400; // 4 s
;//char heater_watchdog = 0;
;
;void main(void)
; 0000 0125 {

	.CSEG
;PCODE: $0000012E VOL: 0
; 0000 0126 // Declare your local variables here
; 0000 0127 unsigned char event = 0;
; 0000 0128 
; 0000 0129 HW_Init();
;	event -> R17
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 012A 
; 0000 012B BEEP_ON;
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 012C //DEBUG_LED_ON;
; 0000 012D 
; 0000 012E OWI_Init(BUS);
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 012F BUT_Init();
;PCODE: $00000136 VOL: 0
; 0000 0130 nlcd_Init();
;PCODE: $00000137 VOL: 0
; 0000 0131 delay_ms(10);
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 0132 
; 0000 0133 nlcd_GotoXY(0,0);
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 0134 nlcd_PrintF("----------------");
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 0135 nlcd_PrintWideF(" Nikopol");
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 0136 nlcd_GotoXY(0,2);
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 0137 nlcd_PrintF("    present     ");
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 0138 nlcd_PrintF("   -<ÑÏÈÐÒ>-    ");
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 0139 nlcd_PrintF("   êîíòðîëëåð   ");
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 013A #ifdef HW1_P
; 0000 013B     nlcd_PrintF(" hw v.1.1d P sen");
; 0000 013C #else
; 0000 013D     nlcd_PrintF(" hw v.1.1d      ");
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 013E #endif
; 0000 013F 
; 0000 0140 #ifdef SLOW_HEAD_SPEED
; 0000 0141 nlcd_PrintF(" sw v.0.32.s uni");
; 0000 0142 #else
; 0000 0143 nlcd_PrintF(" sw v.0.32.f uni");
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 0144 #endif
; 0000 0145 BEEP_OFF;
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 0146 delay_ms(2000);
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 0147 nlcd_Clear();
;PCODE: $0000015C VOL: 0
; 0000 0148 
; 0000 0149 //DEBUG_LED_OFF;
; 0000 014A 
; 0000 014B nlcd_GotoXY(0,2);
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 014C nlcd_PrintF(" Èíèöèàëèçàöèÿ  ");
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0000 014D nlcd_PrintF("  äàò÷èêîâ Ò    ");
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 014E nlcd_PrintF("    Íàéäåíî     ");
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 014F 
; 0000 0150 if (OWI_SearchDevices(ds1820_rom_codes, MAX_DS1820, BUS, &ds1820_devices) == SEARCH_SUCCESSFUL) {
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 0151     sprintf(buf, "%i øò", ds1820_devices);
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 0152 } else {
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 0153     sprintf(buf, "%i øò", 0);
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0000 0154 }
;PCODE: $0000018D VOL: 0
; 0000 0155 nlcd_GotoXY(1,5);
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0000 0156 nlcd_Print(buf);
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0000 0157 delay_ms(2000);
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 0158 nlcd_Clear();
;PCODE: $00000196 VOL: 0
; 0000 0159 LoadParam();
;PCODE: $00000197 VOL: 0
; 0000 015A SetNewParams();
;PCODE: $00000198 VOL: 0
; 0000 015B // Global enable interrupts
; 0000 015C #asm("sei")
;PCODE: $00000199 VOL: 0
	sei
;PCODE: $0000019A VOL: 0
; 0000 015D 
; 0000 015E /*
; 0000 015F // Watchdog Timer initialization
; 0000 0160 // Watchdog Timer Prescaler: OSC/2048k
; 0000 0161 #pragma optsize-
; 0000 0162 WDTCR=0x1F;
; 0000 0163 WDTCR=0x0F;
; 0000 0164 #ifdef _OPTIMIZE_SIZE_
; 0000 0165 #pragma optsize+
; 0000 0166 #endif
; 0000 0167 */
; 0000 0168 #ifdef HW1_P
; 0000 0169     PresureInit();
; 0000 016A #endif
; 0000 016B 
; 0000 016C while (1)
;PCODE: $0000019B VOL: 0
; 0000 016D       {
; 0000 016E       // Place your code here
; 0000 016F       // #asm("wdr");
; 0000 0170         event = ES_GetEvent();
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
; 0000 0171         if (event)
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0000 0172             ES_Dispatch(event);
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
; 0000 0173       }
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
; 0000 0174 }
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0

	.DSEG
_0x27:
	.BYTE 0xA2
