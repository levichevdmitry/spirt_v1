;// This file has been prepared for Doxygen automatic documentation generation.
;/*! \file ********************************************************************
;*
;* Atmel Corporation
;*
;* \li File:               OWIcrc.c
;* \li Compiler:           IAR EWAAVR 3.20a
;* \li Support mail:       avr@atmel.com
;*
;* \li Supported devices:  All AVRs.
;*
;* \li Application Note:   AVR318 - Dallas 1-Wire(R) master.
;*
;*
;* \li Description:        CRC algorithms typically used in a 1-Wire(R)
;*                         environment.
;*
;*                         $Revision: 1.7 $
;*                         $Date: Thursday, August 19, 2004 14:27:16 UTC $
;****************************************************************************/
;
;#include "OWIcrc.h"
;#include "OWIdefs.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;
;/*! \brief  Compute the CRC8 value of a data set.
; *
; *  This function will compute the CRC8 or DOW-CRC of inData using seed
; *  as inital value for the CRC.
; *
; *  \param  inData  One byte of data to compute CRC from.
; *
; *  \param  seed    The starting value of the CRC.
; *
; *  \return The CRC8 of inData with seed as initial value.
; *
; *  \note   Setting seed to 0 computes the crc8 of the inData.
; *
; *  \note   Constantly passing the return value of this function
; *          As the seed argument computes the CRC8 value of a
; *          longer string of data.
; */
;unsigned char OWI_ComputeCRC8(unsigned char inData, unsigned char seed)
; 0008 002C {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0008 002D     unsigned char bitsLeft;
; 0008 002E     unsigned char temp;
; 0008 002F 
; 0008 0030     for (bitsLeft = 8; bitsLeft > 0; bitsLeft--)
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;	inData -> Y+3
;	seed -> Y+2
;	bitsLeft -> R17
;	temp -> R16
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0008 0031     {
; 0008 0032         temp = ((seed ^ inData) & 0x01);
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0008 0033         if (temp == 0)
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0008 0034         {
; 0008 0035             seed >>= 1;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0008 0036         }
; 0008 0037         else
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0008 0038         {
; 0008 0039             seed ^= 0x18;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0008 003A             seed >>= 1;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0008 003B             seed |= 0x80;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0008 003C         }
;PCODE: $00000032 VOL: 0
; 0008 003D         inData >>= 1;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0008 003E     }
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0008 003F     return seed;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0008 0040 }
;PCODE: $00000042 VOL: 0
;
;
;/*! \brief  Compute the CRC16 value of a data set.
; *
; *  This function will compute the CRC16 of inData using seed
; *  as inital value for the CRC.
; *
; *  \param  inData  One byte of data to compute CRC from.
; *
; *  \param  seed    The starting value of the CRC.
; *
; *  \return The CRC16 of inData with seed as initial value.
; *
; *  \note   Setting seed to 0 computes the crc16 of the inData.
; *
; *  \note   Constantly passing the return value of this function
; *          As the seed argument computes the CRC16 value of a
; *          longer string of data.
; */
;unsigned int OWI_ComputeCRC16(unsigned char inData, unsigned int seed)
; 0008 0055 {
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0008 0056     unsigned char bitsLeft;
; 0008 0057     unsigned char temp;
; 0008 0058 
; 0008 0059     for (bitsLeft = 8; bitsLeft > 0; bitsLeft--)
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;	inData -> Y+4
;	seed -> Y+2
;	bitsLeft -> R17
;	temp -> R16
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0008 005A     {
; 0008 005B         temp = ((seed ^ inData) & 0x01);
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0008 005C         if (temp == 0)
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0008 005D         {
; 0008 005E             seed >>= 1;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0008 005F         }
; 0008 0060         else
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0008 0061         {
; 0008 0062             seed ^= 0x4002;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0008 0063             seed >>= 1;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0008 0064             seed |= 0x8000;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0008 0065         }
;PCODE: $00000068 VOL: 0
; 0008 0066         inData >>= 1;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0008 0067     }
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0008 0068     return seed;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0008 0069 }
;PCODE: $00000078 VOL: 0
;
;
;/*! \brief  Calculate and check the CRC of a 64 bit ROM identifier.
; *
; *  This function computes the CRC8 value of the first 56 bits of a
; *  64 bit identifier. It then checks the calculated value against the
; *  CRC value stored in ROM.
; *
; *  \param  romvalue    A pointer to an array holding a 64 bit identifier.
; *
; *  \retval OWI_CRC_OK      The CRC's matched.
; *  \retval OWI_CRC_ERROR   There was a discrepancy between the calculated and the stored CRC.
; */
;unsigned char OWI_CheckRomCRC(unsigned char * romValue)
; 0008 0078 {
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0008 0079     unsigned char i;
; 0008 007A     unsigned char crc8 = 0;
; 0008 007B 
; 0008 007C     for (i = 0; i < 7; i++)
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;	*romValue -> Y+2
;	i -> R17
;	crc8 -> R16
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0008 007D     {
; 0008 007E         crc8 = OWI_ComputeCRC8(*romValue, crc8);
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0008 007F         romValue++;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0008 0080     }
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0008 0081     if (crc8 == (*romValue))
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0008 0082     {
; 0008 0083         return OWI_CRC_OK;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0008 0084     }
; 0008 0085     return OWI_CRC_ERROR;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0008 0086 }
;PCODE: $000000AA VOL: 0
